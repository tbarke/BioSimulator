#from scipy import special
import cell
import enviornment
import utils
import simulation
import MICalc
import numpy
import random
import randomClass
import matplotlib.pyplot as plt
from matplotlib import cm
import math
import pickle
import numpy as np
import gc
import run
import time
import runSuite
plt.rc('pdf', fonttype=42)
locationStep = 0.5
# size scaled from 100
scale = 1/locationStep
SimParams = [100,-1]
# [diffCoeff, absorb/reflect/periodic, repeatFrequency, magnitude, locationA, locationB]
ConcParams = [5, "periodic", 0, 100000.0, 35, 70, "static", 10 * ((2*math.pi)/(SimParams[0]*scale)), 500, -25.5 * scale, 25.5 * scale, 0, 50]

cell_stress = .001

CellMetaStats = [1.0/cell_stress, 0.0, 250, 1.0, "non", "non", 1.6, "gaussian", 1, 1, 1, 0]
CellStats = [200,200,400,0,0,0,5,1,0,0]
Celllocations = []

# Enviornemnt paramter array: [simulationLengthTime, full divide, full Die, sim Time Step, sim location step]
EnviornmentParams = [10, True, True, 0.1, locationStep]

CellMetaStats[5] = "measured"
simLength = EnviornmentParams[0]
simRepeat = 1
parameters = [SimParams, ConcParams, CellMetaStats, CellStats, Celllocations, EnviornmentParams, simRepeat]

noise_array = [0.0]
cell_stress_array = [0.2, 0.4, 0.6, 0.8, 1]
preset_bool = False

presets = []
presetA = []
presetB = []
presetA_loc = []
presetB_loc = []
presets.append(presetA)
presets.append(presetB)
presets.append(presetA_loc)
presets.append(presetB_loc)

MI_A = [2.369319777743075, 2.369319777743075, 2.369319777743075, 2.0093303822738684, 2.6829708253312456, 2.6277185639636524, 1.3693382774240805, 1.3055082264345195, 1.5780320519161632, 1.7323351917537977, 1.2118373970403673, 1.169724708416524, 1.108616909039244, 1.2874104874432228, 0.938593604692691, 1.0562447256234815, 0.9800252923076387, 1.0510818677348583, 0.8285574539703988, 0.7725036190000132, 0.8932563538836797, 0.8830828445884136, 0.787057862572788, 0.7634927587465457, 0.7136188940220283, 0.6384824250953494, 0.6820404766273134, 0.6022179443053002, 0.6326750212401477, 0.7038951121838073, 0.5693001847020969, 0.6050238140021698, 0.6528412862358941, 0.5805286941602945, 0.6541913394737273, 0.6309160934929248, 0.5581982897945408, 0.5800726632224609, 0.5413504521216435, 0.46455402485931696, 0.5194622565336606, 0.548852169635673, 0.5107262108467276, 0.44743953295435346, 0.41735409286222214, 0.5622426838449668, 0.5812835234048224, 0.34358270619872866, 0.38900645952025914, 0.3802792403061499, 0.3857867203972447, 0.3889674770860463, 0.38092374895506764, 0.4779436439789986]
MI_B = [3.1972088230571036, 3.1972088230571036, 3.1972088230571036, 3.036208683224706, 3.2715893969637655, 3.1934824933810075, 2.066591252007181, 2.0914200297734333, 2.190820014936929, 1.9943392620857368, 1.1361149368209476, 1.2313985847719526, 1.06769716440024, 1.128878261724776, 1.0012494208026337, 0.9415881249138947, 1.0634202949814422, 1.0595448187388525, 0.910830482227023, 0.8644727893358879, 1.0770982526951691, 0.9638615961363945, 1.0336136462657093, 0.9550359060004308, 0.9914421070608861, 0.842932000187373, 1.183190041981696, 1.045212155535188, 0.939683651584454, 0.9849163483849908, 0.9195556304922259, 1.0462379620954665, 0.8799825775779673, 1.0843832746077062, 0.6552040253674023, 1.0601582653932127, 0.8758445750925388, 0.8362633991871831, 0.746619261977564, 0.842023390037284, 0.7305487895650167, 0.7984854752024453, 0.8419180712537138, 0.8164867429021259, 0.7826672253303153, 0.6796892205645175,0.7630571176553453, 0.753283612150002, 0.7494872818290612, 0.6560251064995439, 0.645903719026979, 0.6437607419552323, 0.5945945129916526, 0.5242752610191812]
growth = [0.05340864522858813, 0.05340864522858813, 0.05340864522858813, 0.029753052686642658, 0.02884987166812003, 0.026422221259027767, 0.017134581915847068, 0.01922549475341743, 0.01848560604603724, 0.018934031494102426, 0.007764388423167115, 0.009410232575957068, 0.008979481693042987, 0.008077791409234028, 0.005908712128496519, 0.010101010101010095, 0.0020132202850849223, 0.004393303603197457, 0.0057276827547867995, 0.002924309264595809, 0.004192297972513577, 0.008384595945027147, 0.00104134841377882, 0.0022463880943075633, 0.002013220285084906, 0.016539696167831228, 0.0010413484137788173, 0.009690485005077305, 0.012690300537977619, 0.015828692855796907, 0.014089491084254675, 0.010630984039334698, 0.00661114579771953, 0.00823200107239879, 0.013460356960473437, 0.008232001072398779, 0.015081212235152708, 0.01696707803508339, 0.008685074161128684, 0.017217617338119478, 0.020535505628565282, 0.016099400525935427, 0.02209724245632091, 0.021430600448500325, 0.02419050118526478, 0.012576893917540716, 0.012914499993676583, 0.023181424720071633, 0.020403025832704078, 0.019007445640203836, 0.03073509114838679, 0.027564932071725123, 0.026378128404872195, 0.026245043670046615]
fig, ax = plt.subplots(subplot_kw={"projection": "3d"})
X, Y = np.meshgrid(np.asarray(MI_A), np.asarray(MI_B))

Z = np.asarray([growth])

print(X)

# Plot the surface.
surf = ax.plot_surface(X, Y, Z, cmap=cm.coolwarm, linewidth=0, antialiased=False)
ax.set_xlabel("MI with Respect To A")
ax.set_ylabel("MI with Respect To B")
ax.invert_xaxis()
plt.show()
exit(-1)

decision_types = ["non", "measured", "adjusted"]
totalCells, MI_entropy, MI_return, presets, MI_sums, recs = run.testRun(SimParams, ConcParams, CellMetaStats, CellStats, Celllocations, EnviornmentParams, False, preset_bool, presets)
[MI_A, MI_B, MI] = MI_return
print(MI_A[0])
print(MI_B[0])
print(MI[0])
growth_arr = []
for l in range(len(totalCells)-1):
    growth_arr.append(math.log2(totalCells[l+1]/totalCells[l]))

ave_growth = 0.0
for l in range(len(growth_arr)):
    ave_growth = growth_arr[l]+ave_growth
ave_growth = ave_growth/len(growth_arr)

print(ave_growth)

exit(-1)

decision_types = ["non", "measured", "adjusted"]
cell_stress = [0.25, 0.2, 0.1, 0.01]

decision_types = ["wrong"]
cell_stress = [0.25, 0.2, 0.1, 0.01]

MIs = [0.0, -0.06560826196373881, -0.05908657249807092, -0.020779293347226613, 0.028663597425104825, 0.08138578413823794, 0.13361620875434355, 0.18367017102682404, 0.23090873183705796, 0.27517716471525233, 0.3165631606461581, 0.35526128594935535, 0.39150443383302047, 0.42552907462450484, 0.4575585356808016, 0.48779594931003345, 0.5164222921608985, 0.5435969873453672, 0.5694596845088995, 0.5941324695990975, 0.6177221140064741, 0.6403221745100272, 0.6620148662912442, 0.6828726900347579, 0.7029598235746324, 0.722333301615425, 0.7410440112624688, 0.7591375307702108, 0.7766548364940142, 0.7936328998284932, 0.8101051926344098, 0.8261021166195448, 0.8416513694783312, 0.8567782583353534, 0.871505969155919, 0.8858557992421439, 0.8998473586637434, 0.9134987454486225, 0.92682669851723, 0.9398467316671031, 0.9525732513586878, 0.9650196606004418, 0.9771984508618381, 0.9891212836372123, 1.000799063033254, 1.0122420005440187, 1.0234596730055259, 1.0344610745772584, 1.0452546634774453, 1.0558484040975475, 1.0662498050360512, 1.0764659535185466, 1.0865035466105883, 1.0963689195768413, 1.106068071694951, 1.1156066897948431, 1.124990169760725, 1.1342236362046076, 1.1433119604955273, 1.152259777307318, 1.161071499829399, 1.1697513337684686, 1.178303290255073, 1.1867311977568065, 1.1950387130887599, 1.203229331602305, 1.211306396625103, 1.2192731082178554, 1.2271325313059052, 1.234887603239466, 1.24254114082955, 1.250095846903129, 1.2575543164164724, 1.2649190421619494, 1.2721924201006143, 1.2793767543496024, 1.2864742618509624, 1.2934870767460662, 1.3004172544778392, 1.3072667756406133, 1.314037549596648, 1.3207314178753435, 1.3273501573715318, 1.333895483356354, 1.3403690523140472, 1.3467724646167198, 1.3531072670477826, 1.3593749551847214, 1.365576975650045, 1.3717147282394535, 1.3777895679350838, 1.3838028068111683, 1.3897557158389962, 1.3956495265975928, 1.4014854328959263, 1.407264592311936, 1.4129881276538203, 1.4186571283479523, 1.4242726517579136, 1.429835724438755, 1.435347343330264, 1.4408084768927427, 1.4462200661886264, 1.4515830259129991, 1.4568982453759105, 1.4621665894392368, 1.4673888994103166, 1.4725659938953388, 1.4776986696137957, 1.4827877021769282, 1.4878338468316503, 1.4928378391716866, 1.4978003958180288, 1.502722215069939, 1.5076039775281114, 1.512446346691636, 1.5172499695297272, 1.5220154770296528, 1.5267434847223011, 1.5314345931858213, 1.5360893885292235, 1.5407084428562534, 1.5452923147108972, 1.549841549505107, 1.554356679929823, 1.5588382263499838, 1.5632866971841732, 1.5677025892697483, 1.572086388214128, 1.5764385687326854, 1.5807595949740847, 1.5850499208334696, 1.589309990254062, 1.5935402375177663, 1.5977410875251277, 1.6019129560652594, 1.6060562500760884, 1.6101713678952443, 1.6142586995021695, 1.6183186267517247, 1.6223515235997006, 1.6263577563203544, 1.6303376837167303, 1.6342916573236135, 1.63822002160369, 1.6421231141370836, 1.646001265804566, 1.6498548009647322, 1.65368403762524, 1.6574892876085343, 1.66127085671212, 1.6650290448637133, 1.6687641462713714, 1.6724764495688031, 1.6761662379561653, 1.679833789336401, 1.6834793764471918, 1.6871032669889754, 1.6907057237489624, 1.6942870047212484, 1.6978473632234152, 1.701387048009428, 1.704906303379337, 1.7084053692854493, 1.7118844814355807, 1.7153438713930704, 1.7187837666739352, 1.7222043908411937, 1.7256059635964291, 1.7289887008686833, 1.7323528149007945, 1.735698514333377, 1.7390260042862717, 1.7423354864377316, 1.7456271591015007, 1.7489012173015848, 1.7521578528450235, 1.7553972543926637, 1.7586196075279616, 1.7618250948239265, 1.7650138959082309, 1.7681861875266005, 1.7713421436044232, 1.7744819353067882, 1.7776057310969282, 1.780713696793084, 1.7838059956238812, 1.7868827882822202, 1.7899442329779216, 1.7929904854888203, 1.7960216992106464, 1.7990380252056148, 1.8020396122497182, 1.80502660687897, 1.8079991534343307, 1.8109573941055874, 1.8139014689740982, 1.816831516054485, 1.8197476713353655, 1.8226500688189429, 1.8255388405598243]
adjusted_MI_arr = []
Growth = []
MI = []

try:
    for i in range(len(decision_types)):
        CellMetaStats[5] = decision_types[i]
        adjusted_MI_arr.append([])
        Growth.append([])
        MI.append([])
        for j in range(len(cell_stress)):
            adjusted_MI_arr[i].append([])
            Growth[i].append([])
            MI[i].append([])
            CellMetaStats[0] = 250/(cell_stress[j])
            for k in range(1):
                try:
                    totalCells, MI_entropy, MI_return, presets, MI_sums, recs = run.testRun(SimParams, ConcParams, CellMetaStats, CellStats,Celllocations, EnviornmentParams, False, preset_bool, presets)
                except:
                    print("error Occured, all cells probably died")
                    break
                print(totalCells)

                adjusted_MI = 0.0
                for rec in recs:
                    adjusted_MI += 2*MIs[rec]
                    adjusted_MI += 2*MIs[int(CellStats[2]/2) - rec]
                print("adjusted_MI:")
                print(adjusted_MI/len(recs))
                adjusted_MI_arr[i][j].append(adjusted_MI/len(recs))

                growth_arr = []
                for l in range(len(totalCells)-1):
                    growth_arr.append(math.log2(totalCells[l+1]/totalCells[l]))

                ave_growth = 0.0
                for l in range(len(growth_arr)):
                    ave_growth = growth_arr[l]+ave_growth
                ave_growth = ave_growth/len(growth_arr)
                print("Growth:")
                print(ave_growth)
                Growth[i][j].append(ave_growth)

                print("MI:")
                print(MI_return)
                MI[i][j].append([MI_return[0]])
except:
    print("error ocurred. not cells dying.")

print("adjusted_MI")
print(adjusted_MI_arr)
print("growth")
print(Growth)
print("MI")
print(MI)
